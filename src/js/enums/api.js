export const taskStatus = {
  STARTED: 'STARTED',
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILURE: 'FAILURE',
},
             alertMessages = {
               SAVE_MESSAGE: 'Save successful',
               ERROR_MESSAGE: 'Save failed',
               REMOVE_MESSAGE: 'Remove successful',
               REMOVE_ERROR: 'Remove failed',
             },
             uploadType = {
               DOCUMENT: 1,
               AUDIO: 2,
               IMAGE: 3,
               TEXT: 4,
               VIDEO: 5,
             },
             imageFileExtensions = ['.jpg', '.jpeg', '.gif', '.png'], // 10MB
             imageMaxSize = (10 * 1024 * 1024),
             orderChoices = {
               ASC: 'asc',
               DESC: 'desc',
             },
             filterChoices = { // used to signify a filter, and the corresponding data for filter options in state
               REPORTING_PERIOD_YEAR: 'year',
               REPORTING_PERIOD_TYPE: 'program_type',
               PROGRAM_AREAS: 'program_areas',
               CREATED_BY: 'user',
               REVIEW_USER: 'review_user',
               SUPERVISOR: 'review_user__supervisor',
               COLLABORATORS: 'collaborators__user',
               CONTRIBUTED_BY_COLLABORATOR: 'collaborators__is_contributor',
               UNITS: 'unit',
               INDICATORS: 'priority_indicators',
               CATEGORIES: 'categories',
               SITES: 'site',
               POSITIONS: 'positions',
               SEARCH: 'q',
               ORGANIZATION: 'organization',
               USER_GROUP: 'groups',
               INTERVENTION_NAME: 'intervention',
               TOPIC: 'intervention_topics',
               CHANNEL: 'intervention_channels',
               ZIP: 'site__zip',
               PRIMARY_CURRICULUM: 'primary_curriculum',
               FILE_ATTACHMENTS: 'file_type',
               SESSION_DATE_RANGE_START: 'occurrence_date_0',
               SESSION_DATE_RANGE_END: 'occurrence_date_1',
               CREATED_IN_START: 'created_in_range_0',
               CREATED_IN_END: 'created_in_range_1',
               COVID: 'crisis',
               COMPLETED: 'is_complete',
               VERIFIED: 'is_verified',
               DELIVERY_TYPE: 'delivery_types',
               STATUS: 'status',
               STATUS_VERBOSE: 'status_verbose',
               SETTING: 'setting',
               PLAN_TYPE: 'type',
               LEVEL: 'level',
               IS_SNAC: 'is_snac',
               QUARTER: 'quarter',
               PROGRAM_AREA_GROUPS: 'main_program_area',
               CONTACTS_DATE_RANGE: 'date_range',
               NOTEWORTHY: 'is_noteworthy',
               SOCIO_FRAMEWORK: 'socioecological_framework',
               KEYWORDS: 'keywords',
               APPROACHES: 'approaches',
               CURRENT: 'is_current',
               CONTACT_PREFERENCE: 'contact_preference',
               INITIALIZED: 'is_initialized',
               OPEN_IN_START: 'open_date_in_range_0',
               OPEN_IN_END: 'open_date_in_range_1',
               CLOSE_IN_START: 'close_date_in_range_0',
               CLOSE_IN_END: 'close_date_in_range_1',
               COMPETENCY: 'competency',
               SHOW_PAST_EVENTS: 'show_past_events',
               ACTIVE: 'is_active',
               GENDER: 'gender',
               SNAPED_USER: 'in_snaped_group',
               EXTENSION_USER: 'in_extension_group',
             },
             filterData = {
               // for data that is not a filter in and of itself but used by filters
               // Could possibly run into issues here if we have an Ajax and a static filter that use the same key on the same page
               REPORTING_PERIODS: 'reporting_periods',
               USERS: 'user_list',
             },
             filterNameToOptionKey = {
               // Use filterNameToOptionKey when there are filters that you want to display options for when the option name doesn't match the filter name.
               [filterChoices.STATUS_VERBOSE]: filterChoices.STATUS,
             },
             organizationLevels = {
               IA: 'ia',
               STATE: 'state',
               REGIONAL: 'regional',
               NATIONAL: 'national',
             },
             topicIds = {
               OTHER: 10,
             },
             demographicIds = {
               OTHER: 7,
             },
             goalTypeIds = {
               OTHER: 10,
             },
             programOrgTypeIds = {
               OTHER: 16,
             },
             characteristicToDemographic = { // left side is a demographic characteristic like race/ethnicity and right is the corresponding value in demographiccharacteristicpopulationsize_set
               'primary-language': 'language',
               age: 'age_group',
             },
             levelOfEvidence = {
               RESEARCH_TESTED: 1,
               PRACTICE_TESTED: 2,
               EMERGING: 3,
             },
             reseachTestedEvidence = {
               NONE: 8,
               OTHER: 7,
             },
             travelCostTypes = {
               AIR: 'air-travel',
               REGISTRATION: 'registration',
               MILEAGE: 'mileage',
             };
